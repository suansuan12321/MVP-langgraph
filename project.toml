[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mvp-langgraph"
version = "1.1.0"
description = "基于知识图谱的RAG聊天机器人系统"
readme = "README.md"
license = "MIT"
authors = [
    {name = "suansuan12321", email = "w1336526696@163.com"},
]
keywords = [
    "rag",
    "knowledge-graph", 
    "langchain",
    "langgraph",
    "chatbot",
    "nlp",
    "ai"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    # 核心框架
    "langchain>=0.1.0",
    "langchain-community>=0.0.20",
    "langchain-openai>=0.0.8",
    "langchain-huggingface>=0.0.1",
    "langchain-deepseek>=0.0.1",
    "langgraph>=0.0.20",
    
    # 向量数据库和图数据库
    "pymilvus>=2.3.0",
    "neo4j>=5.0.0",
    "networkx>=3.0",
    
    # 图算法
    "leidenalg>=0.9.0",
    "python-igraph>=0.10.0",
    
    # 文档处理
    "python-dotenv>=1.0.0",
    "beautifulsoup4>=4.12.0",
    "requests>=2.31.0",
    "unstructured>=0.10.0",
    "pdfminer.six==20250506",
    "pi-heif>=0.13.0",
    "pdf2image>=3.1.0",
    "pytesseract>=0.3.10",
    "PyMuPDF>=1.23.0",
    "docx2txt>=0.8",
    
    # 嵌入和模型
    "sentence-transformers>=2.2.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    
    # 数据处理
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    
    # 异步支持
    "asyncio>=3.4.3",
    "aiofiles>=23.0.0",
    
    # 工具库
    "jieba>=0.42.1",
    "pickle-mixin>=1.0.2",
    "python-dateutil>=2.8.0",
    "pydantic>=2.0.0",
    
    # 日志和监控
    "loguru>=0.7.0",
    "rich>=13.0.0",
    
    # 配置管理
    "pyyaml>=6.0.0",
    "toml>=0.10.2",

    # LangSmith
    "langsmith>=0.1.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation-langchain>=0.40.0",
    "wandb>=0.15.0",  # 可选：Weights & Biases 集成
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings>=0.22.0",
    "mkdocs-gen-files>=0.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.24.0",
]

docker = [
    "docker>=6.1.0",
    "docker-compose>=1.29.0",
]

[project.urls]
Homepage = "https://github.com/suansuan12321/MVP-langgraph"
Repository = "https://github.com/suansuan12321/MVP-langgraph.git"
Documentation = "https://github.com/suansuan12321/MVP-langgraph/blob/main/docs"
Issues = "https://github.com/suansuan12321/MVP-langgraph/issues"
Changelog = "https://github.com/suansuan12321/MVP-langgraph/blob/main/CHANGELOG.md"

[project.scripts]
mvp-embedding = "embedding:main"
mvp-graphrag = "graphRAG_create:main"
mvp-graphrag-query = "graphRAG_query:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mvp_langgraph"]
known_third_party = ["langchain", "langgraph", "pymilvus", "neo4j"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "leidenalg.*",
    "igraph.*",
    "pymilvus.*",
    "neo4j.*",
    "unstructured.*",
    "pdfminer.*",
    "docx2txt.*",
    "pytesseract.*",
    "fitz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/.env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.ruff.isort]
known-first-party = ["mvp_langgraph"]

[tool.setuptools.packages.find]
where = ["."]
include = ["mvp_langgraph*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"mvp_langgraph" = ["py.typed", "*.pyi"]

# 预提交钩子配置
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            { id = "trailing-whitespace" },
            { id = "end-of-file-fixer" },
            { id = "check-yaml" },
            { id = "check-added-large-files" },
            { id = "check-merge-conflict" },
        ],
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{ id = "black" }],
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{ id = "isort" }],
    },
    {
        repo = "https://github.com/charliermarsh/ruff-pre-commit",
        rev = "v0.0.284",
        hooks = [{ id = "ruff" }],
    },
]